type AggregateTeam {
  count: Int!
}

type AggregateTournament {
  count: Int!
}

type AggregateTournamentGroup {
  count: Int!
}

type AggregateTournamentMember {
  count: Int!
}

type AggregateTournamentRequest {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createTeam(data: TeamCreateInput!): Team!
  updateManyTeams(data: TeamUpdateInput!, where: TeamWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createTournament(data: TournamentCreateInput!): Tournament!
  updateTournament(data: TournamentUpdateInput!, where: TournamentWhereUniqueInput!): Tournament
  updateManyTournaments(data: TournamentUpdateInput!, where: TournamentWhereInput): BatchPayload!
  upsertTournament(where: TournamentWhereUniqueInput!, create: TournamentCreateInput!, update: TournamentUpdateInput!): Tournament!
  deleteTournament(where: TournamentWhereUniqueInput!): Tournament
  deleteManyTournaments(where: TournamentWhereInput): BatchPayload!
  createTournamentGroup(data: TournamentGroupCreateInput!): TournamentGroup!
  updateTournamentGroup(data: TournamentGroupUpdateInput!, where: TournamentGroupWhereUniqueInput!): TournamentGroup
  updateManyTournamentGroups(data: TournamentGroupUpdateInput!, where: TournamentGroupWhereInput): BatchPayload!
  upsertTournamentGroup(where: TournamentGroupWhereUniqueInput!, create: TournamentGroupCreateInput!, update: TournamentGroupUpdateInput!): TournamentGroup!
  deleteTournamentGroup(where: TournamentGroupWhereUniqueInput!): TournamentGroup
  deleteManyTournamentGroups(where: TournamentGroupWhereInput): BatchPayload!
  createTournamentMember(data: TournamentMemberCreateInput!): TournamentMember!
  updateTournamentMember(data: TournamentMemberUpdateInput!, where: TournamentMemberWhereUniqueInput!): TournamentMember
  updateManyTournamentMembers(data: TournamentMemberUpdateInput!, where: TournamentMemberWhereInput): BatchPayload!
  upsertTournamentMember(where: TournamentMemberWhereUniqueInput!, create: TournamentMemberCreateInput!, update: TournamentMemberUpdateInput!): TournamentMember!
  deleteTournamentMember(where: TournamentMemberWhereUniqueInput!): TournamentMember
  deleteManyTournamentMembers(where: TournamentMemberWhereInput): BatchPayload!
  createTournamentRequest(data: TournamentRequestCreateInput!): TournamentRequest!
  updateTournamentRequest(data: TournamentRequestUpdateInput!, where: TournamentRequestWhereUniqueInput!): TournamentRequest
  updateManyTournamentRequests(data: TournamentRequestUpdateInput!, where: TournamentRequestWhereInput): BatchPayload!
  upsertTournamentRequest(where: TournamentRequestWhereUniqueInput!, create: TournamentRequestCreateInput!, update: TournamentRequestUpdateInput!): TournamentRequest!
  deleteTournamentRequest(where: TournamentRequestWhereUniqueInput!): TournamentRequest
  deleteManyTournamentRequests(where: TournamentRequestWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  USER
}

type Query {
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  tournament(where: TournamentWhereUniqueInput!): Tournament
  tournaments(where: TournamentWhereInput, orderBy: TournamentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tournament]!
  tournamentsConnection(where: TournamentWhereInput, orderBy: TournamentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentConnection!
  tournamentGroup(where: TournamentGroupWhereUniqueInput!): TournamentGroup
  tournamentGroups(where: TournamentGroupWhereInput, orderBy: TournamentGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentGroup]!
  tournamentGroupsConnection(where: TournamentGroupWhereInput, orderBy: TournamentGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentGroupConnection!
  tournamentMember(where: TournamentMemberWhereUniqueInput!): TournamentMember
  tournamentMembers(where: TournamentMemberWhereInput, orderBy: TournamentMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentMember]!
  tournamentMembersConnection(where: TournamentMemberWhereInput, orderBy: TournamentMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentMemberConnection!
  tournamentRequest(where: TournamentRequestWhereUniqueInput!): TournamentRequest
  tournamentRequests(where: TournamentRequestWhereInput, orderBy: TournamentRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentRequest]!
  tournamentRequestsConnection(where: TournamentRequestWhereInput, orderBy: TournamentRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TournamentRequestConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  tournament(where: TournamentSubscriptionWhereInput): TournamentSubscriptionPayload
  tournamentGroup(where: TournamentGroupSubscriptionWhereInput): TournamentGroupSubscriptionPayload
  tournamentMember(where: TournamentMemberSubscriptionWhereInput): TournamentMemberSubscriptionPayload
  tournamentRequest(where: TournamentRequestSubscriptionWhereInput): TournamentRequestSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Team {
  id: ID!
  name: String!
  seed: Float!
  region: String
  wins: Float
  bonusPoints: Float
  season: String
  record: String
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  name: String!
  seed: Float!
  region: String
  wins: Float
  bonusPoints: Float
  season: String
  record: String
}

input TeamCreateManyInput {
  create: [TeamCreateInput!]
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  seed_ASC
  seed_DESC
  region_ASC
  region_DESC
  wins_ASC
  wins_DESC
  bonusPoints_ASC
  bonusPoints_DESC
  season_ASC
  season_DESC
  record_ASC
  record_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamPreviousValues {
  id: ID!
  name: String!
  seed: Float!
  region: String
  wins: Float
  bonusPoints: Float
  season: String
  record: String
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateInput {
  name: String
  seed: Float
  region: String
  wins: Float
  bonusPoints: Float
  season: String
  record: String
}

input TeamUpdateManyInput {
  create: [TeamCreateInput!]
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  seed: Float
  seed_not: Float
  seed_in: [Float!]
  seed_not_in: [Float!]
  seed_lt: Float
  seed_lte: Float
  seed_gt: Float
  seed_gte: Float
  region: String
  region_not: String
  region_in: [String!]
  region_not_in: [String!]
  region_lt: String
  region_lte: String
  region_gt: String
  region_gte: String
  region_contains: String
  region_not_contains: String
  region_starts_with: String
  region_not_starts_with: String
  region_ends_with: String
  region_not_ends_with: String
  wins: Float
  wins_not: Float
  wins_in: [Float!]
  wins_not_in: [Float!]
  wins_lt: Float
  wins_lte: Float
  wins_gt: Float
  wins_gte: Float
  bonusPoints: Float
  bonusPoints_not: Float
  bonusPoints_in: [Float!]
  bonusPoints_not_in: [Float!]
  bonusPoints_lt: Float
  bonusPoints_lte: Float
  bonusPoints_gt: Float
  bonusPoints_gte: Float
  season: String
  season_not: String
  season_in: [String!]
  season_not_in: [String!]
  season_lt: String
  season_lte: String
  season_gt: String
  season_gte: String
  season_contains: String
  season_not_contains: String
  season_starts_with: String
  season_not_starts_with: String
  season_ends_with: String
  season_not_ends_with: String
  record: String
  record_not: String
  record_in: [String!]
  record_not_in: [String!]
  record_lt: String
  record_lte: String
  record_gt: String
  record_gte: String
  record_contains: String
  record_not_contains: String
  record_starts_with: String
  record_not_starts_with: String
  record_ends_with: String
  record_not_ends_with: String
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

type Tournament {
  id: ID!
  name: String!
  password: String!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  type: String
  startDate: String
  tournamentMembers(where: TournamentMemberWhereInput, orderBy: TournamentMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentMember!]
  maxMembers: Float
}

type TournamentConnection {
  pageInfo: PageInfo!
  edges: [TournamentEdge]!
  aggregate: AggregateTournament!
}

input TournamentCreateInput {
  name: String!
  password: String!
  teams: TeamCreateManyInput
  type: String
  startDate: String
  tournamentMembers: TournamentMemberCreateManyWithoutTournamentInput
  maxMembers: Float
}

input TournamentCreateOneInput {
  create: TournamentCreateInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateOneWithoutTournamentMembersInput {
  create: TournamentCreateWithoutTournamentMembersInput
  connect: TournamentWhereUniqueInput
}

input TournamentCreateWithoutTournamentMembersInput {
  name: String!
  password: String!
  teams: TeamCreateManyInput
  type: String
  startDate: String
  maxMembers: Float
}

type TournamentEdge {
  node: Tournament!
  cursor: String!
}

type TournamentGroup {
  id: ID!
  name: String!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  rounds: Float
}

type TournamentGroupConnection {
  pageInfo: PageInfo!
  edges: [TournamentGroupEdge]!
  aggregate: AggregateTournamentGroup!
}

input TournamentGroupCreateInput {
  name: String!
  teams: TeamCreateManyInput
  rounds: Float
}

type TournamentGroupEdge {
  node: TournamentGroup!
  cursor: String!
}

enum TournamentGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rounds_ASC
  rounds_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TournamentGroupPreviousValues {
  id: ID!
  name: String!
  rounds: Float
}

type TournamentGroupSubscriptionPayload {
  mutation: MutationType!
  node: TournamentGroup
  updatedFields: [String!]
  previousValues: TournamentGroupPreviousValues
}

input TournamentGroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentGroupWhereInput
  AND: [TournamentGroupSubscriptionWhereInput!]
  OR: [TournamentGroupSubscriptionWhereInput!]
  NOT: [TournamentGroupSubscriptionWhereInput!]
}

input TournamentGroupUpdateInput {
  name: String
  teams: TeamUpdateManyInput
  rounds: Float
}

input TournamentGroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  rounds: Float
  rounds_not: Float
  rounds_in: [Float!]
  rounds_not_in: [Float!]
  rounds_lt: Float
  rounds_lte: Float
  rounds_gt: Float
  rounds_gte: Float
  AND: [TournamentGroupWhereInput!]
  OR: [TournamentGroupWhereInput!]
  NOT: [TournamentGroupWhereInput!]
}

input TournamentGroupWhereUniqueInput {
  id: ID
  name: String
}

type TournamentMember {
  id: ID!
  user: User
  tournament: Tournament
  points: Float
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  role: String
}

type TournamentMemberConnection {
  pageInfo: PageInfo!
  edges: [TournamentMemberEdge]!
  aggregate: AggregateTournamentMember!
}

input TournamentMemberCreateInput {
  user: UserCreateOneWithoutTournamentMembersInput
  tournament: TournamentCreateOneWithoutTournamentMembersInput
  points: Float
  teams: TeamCreateManyInput
  role: String
}

input TournamentMemberCreateManyWithoutTournamentInput {
  create: [TournamentMemberCreateWithoutTournamentInput!]
  connect: [TournamentMemberWhereUniqueInput!]
}

input TournamentMemberCreateManyWithoutUserInput {
  create: [TournamentMemberCreateWithoutUserInput!]
  connect: [TournamentMemberWhereUniqueInput!]
}

input TournamentMemberCreateWithoutTournamentInput {
  user: UserCreateOneWithoutTournamentMembersInput
  points: Float
  teams: TeamCreateManyInput
  role: String
}

input TournamentMemberCreateWithoutUserInput {
  tournament: TournamentCreateOneWithoutTournamentMembersInput
  points: Float
  teams: TeamCreateManyInput
  role: String
}

type TournamentMemberEdge {
  node: TournamentMember!
  cursor: String!
}

enum TournamentMemberOrderByInput {
  id_ASC
  id_DESC
  points_ASC
  points_DESC
  role_ASC
  role_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TournamentMemberPreviousValues {
  id: ID!
  points: Float
  role: String
}

type TournamentMemberSubscriptionPayload {
  mutation: MutationType!
  node: TournamentMember
  updatedFields: [String!]
  previousValues: TournamentMemberPreviousValues
}

input TournamentMemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentMemberWhereInput
  AND: [TournamentMemberSubscriptionWhereInput!]
  OR: [TournamentMemberSubscriptionWhereInput!]
  NOT: [TournamentMemberSubscriptionWhereInput!]
}

input TournamentMemberUpdateInput {
  user: UserUpdateOneWithoutTournamentMembersInput
  tournament: TournamentUpdateOneWithoutTournamentMembersInput
  points: Float
  teams: TeamUpdateManyInput
  role: String
}

input TournamentMemberUpdateManyWithoutTournamentInput {
  create: [TournamentMemberCreateWithoutTournamentInput!]
  delete: [TournamentMemberWhereUniqueInput!]
  connect: [TournamentMemberWhereUniqueInput!]
  disconnect: [TournamentMemberWhereUniqueInput!]
  update: [TournamentMemberUpdateWithWhereUniqueWithoutTournamentInput!]
  upsert: [TournamentMemberUpsertWithWhereUniqueWithoutTournamentInput!]
}

input TournamentMemberUpdateManyWithoutUserInput {
  create: [TournamentMemberCreateWithoutUserInput!]
  delete: [TournamentMemberWhereUniqueInput!]
  connect: [TournamentMemberWhereUniqueInput!]
  disconnect: [TournamentMemberWhereUniqueInput!]
  update: [TournamentMemberUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TournamentMemberUpsertWithWhereUniqueWithoutUserInput!]
}

input TournamentMemberUpdateWithoutTournamentDataInput {
  user: UserUpdateOneWithoutTournamentMembersInput
  points: Float
  teams: TeamUpdateManyInput
  role: String
}

input TournamentMemberUpdateWithoutUserDataInput {
  tournament: TournamentUpdateOneWithoutTournamentMembersInput
  points: Float
  teams: TeamUpdateManyInput
  role: String
}

input TournamentMemberUpdateWithWhereUniqueWithoutTournamentInput {
  where: TournamentMemberWhereUniqueInput!
  data: TournamentMemberUpdateWithoutTournamentDataInput!
}

input TournamentMemberUpdateWithWhereUniqueWithoutUserInput {
  where: TournamentMemberWhereUniqueInput!
  data: TournamentMemberUpdateWithoutUserDataInput!
}

input TournamentMemberUpsertWithWhereUniqueWithoutTournamentInput {
  where: TournamentMemberWhereUniqueInput!
  update: TournamentMemberUpdateWithoutTournamentDataInput!
  create: TournamentMemberCreateWithoutTournamentInput!
}

input TournamentMemberUpsertWithWhereUniqueWithoutUserInput {
  where: TournamentMemberWhereUniqueInput!
  update: TournamentMemberUpdateWithoutUserDataInput!
  create: TournamentMemberCreateWithoutUserInput!
}

input TournamentMemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  tournament: TournamentWhereInput
  points: Float
  points_not: Float
  points_in: [Float!]
  points_not_in: [Float!]
  points_lt: Float
  points_lte: Float
  points_gt: Float
  points_gte: Float
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  AND: [TournamentMemberWhereInput!]
  OR: [TournamentMemberWhereInput!]
  NOT: [TournamentMemberWhereInput!]
}

input TournamentMemberWhereUniqueInput {
  id: ID
}

enum TournamentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  type_ASC
  type_DESC
  startDate_ASC
  startDate_DESC
  maxMembers_ASC
  maxMembers_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TournamentPreviousValues {
  id: ID!
  name: String!
  password: String!
  type: String
  startDate: String
  maxMembers: Float
}

type TournamentRequest {
  id: ID!
  tournament: Tournament
  user: User
}

type TournamentRequestConnection {
  pageInfo: PageInfo!
  edges: [TournamentRequestEdge]!
  aggregate: AggregateTournamentRequest!
}

input TournamentRequestCreateInput {
  tournament: TournamentCreateOneInput
  user: UserCreateOneWithoutTournamentRequestsInput
}

input TournamentRequestCreateManyWithoutUserInput {
  create: [TournamentRequestCreateWithoutUserInput!]
  connect: [TournamentRequestWhereUniqueInput!]
}

input TournamentRequestCreateWithoutUserInput {
  tournament: TournamentCreateOneInput
}

type TournamentRequestEdge {
  node: TournamentRequest!
  cursor: String!
}

enum TournamentRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TournamentRequestPreviousValues {
  id: ID!
}

type TournamentRequestSubscriptionPayload {
  mutation: MutationType!
  node: TournamentRequest
  updatedFields: [String!]
  previousValues: TournamentRequestPreviousValues
}

input TournamentRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentRequestWhereInput
  AND: [TournamentRequestSubscriptionWhereInput!]
  OR: [TournamentRequestSubscriptionWhereInput!]
  NOT: [TournamentRequestSubscriptionWhereInput!]
}

input TournamentRequestUpdateInput {
  tournament: TournamentUpdateOneInput
  user: UserUpdateOneWithoutTournamentRequestsInput
}

input TournamentRequestUpdateManyWithoutUserInput {
  create: [TournamentRequestCreateWithoutUserInput!]
  delete: [TournamentRequestWhereUniqueInput!]
  connect: [TournamentRequestWhereUniqueInput!]
  disconnect: [TournamentRequestWhereUniqueInput!]
  update: [TournamentRequestUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TournamentRequestUpsertWithWhereUniqueWithoutUserInput!]
}

input TournamentRequestUpdateWithoutUserDataInput {
  tournament: TournamentUpdateOneInput
}

input TournamentRequestUpdateWithWhereUniqueWithoutUserInput {
  where: TournamentRequestWhereUniqueInput!
  data: TournamentRequestUpdateWithoutUserDataInput!
}

input TournamentRequestUpsertWithWhereUniqueWithoutUserInput {
  where: TournamentRequestWhereUniqueInput!
  update: TournamentRequestUpdateWithoutUserDataInput!
  create: TournamentRequestCreateWithoutUserInput!
}

input TournamentRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tournament: TournamentWhereInput
  user: UserWhereInput
  AND: [TournamentRequestWhereInput!]
  OR: [TournamentRequestWhereInput!]
  NOT: [TournamentRequestWhereInput!]
}

input TournamentRequestWhereUniqueInput {
  id: ID
}

type TournamentSubscriptionPayload {
  mutation: MutationType!
  node: Tournament
  updatedFields: [String!]
  previousValues: TournamentPreviousValues
}

input TournamentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TournamentWhereInput
  AND: [TournamentSubscriptionWhereInput!]
  OR: [TournamentSubscriptionWhereInput!]
  NOT: [TournamentSubscriptionWhereInput!]
}

input TournamentUpdateDataInput {
  name: String
  password: String
  teams: TeamUpdateManyInput
  type: String
  startDate: String
  tournamentMembers: TournamentMemberUpdateManyWithoutTournamentInput
  maxMembers: Float
}

input TournamentUpdateInput {
  name: String
  password: String
  teams: TeamUpdateManyInput
  type: String
  startDate: String
  tournamentMembers: TournamentMemberUpdateManyWithoutTournamentInput
  maxMembers: Float
}

input TournamentUpdateOneInput {
  create: TournamentCreateInput
  update: TournamentUpdateDataInput
  upsert: TournamentUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TournamentWhereUniqueInput
}

input TournamentUpdateOneWithoutTournamentMembersInput {
  create: TournamentCreateWithoutTournamentMembersInput
  update: TournamentUpdateWithoutTournamentMembersDataInput
  upsert: TournamentUpsertWithoutTournamentMembersInput
  delete: Boolean
  disconnect: Boolean
  connect: TournamentWhereUniqueInput
}

input TournamentUpdateWithoutTournamentMembersDataInput {
  name: String
  password: String
  teams: TeamUpdateManyInput
  type: String
  startDate: String
  maxMembers: Float
}

input TournamentUpsertNestedInput {
  update: TournamentUpdateDataInput!
  create: TournamentCreateInput!
}

input TournamentUpsertWithoutTournamentMembersInput {
  update: TournamentUpdateWithoutTournamentMembersDataInput!
  create: TournamentCreateWithoutTournamentMembersInput!
}

input TournamentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  startDate: String
  startDate_not: String
  startDate_in: [String!]
  startDate_not_in: [String!]
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_contains: String
  startDate_not_contains: String
  startDate_starts_with: String
  startDate_not_starts_with: String
  startDate_ends_with: String
  startDate_not_ends_with: String
  tournamentMembers_every: TournamentMemberWhereInput
  tournamentMembers_some: TournamentMemberWhereInput
  tournamentMembers_none: TournamentMemberWhereInput
  maxMembers: Float
  maxMembers_not: Float
  maxMembers_in: [Float!]
  maxMembers_not_in: [Float!]
  maxMembers_lt: Float
  maxMembers_lte: Float
  maxMembers_gt: Float
  maxMembers_gte: Float
  AND: [TournamentWhereInput!]
  OR: [TournamentWhereInput!]
  NOT: [TournamentWhereInput!]
}

input TournamentWhereUniqueInput {
  id: ID
  name: String
}

type User {
  id: ID!
  email: String!
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  token: String
  permissions: [Permission!]!
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  tournamentMembers(where: TournamentMemberWhereInput, orderBy: TournamentMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentMember!]
  tournamentRequests(where: TournamentRequestWhereInput, orderBy: TournamentRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TournamentRequest!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  token: String
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  tournamentMembers: TournamentMemberCreateManyWithoutUserInput
  tournamentRequests: TournamentRequestCreateManyWithoutUserInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutTournamentMembersInput {
  create: UserCreateWithoutTournamentMembersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTournamentRequestsInput {
  create: UserCreateWithoutTournamentRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutTournamentMembersInput {
  email: String!
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  token: String
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  tournamentRequests: TournamentRequestCreateManyWithoutUserInput
}

input UserCreateWithoutTournamentRequestsInput {
  email: String!
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  token: String
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  tournamentMembers: TournamentMemberCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  token_ASC
  token_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  username: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  token: String
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  token: String
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  tournamentMembers: TournamentMemberUpdateManyWithoutUserInput
  tournamentRequests: TournamentRequestUpdateManyWithoutUserInput
}

input UserUpdateInput {
  email: String
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  token: String
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  tournamentMembers: TournamentMemberUpdateManyWithoutUserInput
  tournamentRequests: TournamentRequestUpdateManyWithoutUserInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateOneWithoutTournamentMembersInput {
  create: UserCreateWithoutTournamentMembersInput
  update: UserUpdateWithoutTournamentMembersDataInput
  upsert: UserUpsertWithoutTournamentMembersInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutTournamentRequestsInput {
  create: UserCreateWithoutTournamentRequestsInput
  update: UserUpdateWithoutTournamentRequestsDataInput
  upsert: UserUpsertWithoutTournamentRequestsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutTournamentMembersDataInput {
  email: String
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  token: String
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  tournamentRequests: TournamentRequestUpdateManyWithoutUserInput
}

input UserUpdateWithoutTournamentRequestsDataInput {
  email: String
  username: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  token: String
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  tournamentMembers: TournamentMemberUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertWithoutTournamentMembersInput {
  update: UserUpdateWithoutTournamentMembersDataInput!
  create: UserCreateWithoutTournamentMembersInput!
}

input UserUpsertWithoutTournamentRequestsInput {
  update: UserUpdateWithoutTournamentRequestsDataInput!
  create: UserCreateWithoutTournamentRequestsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
  tournamentMembers_every: TournamentMemberWhereInput
  tournamentMembers_some: TournamentMemberWhereInput
  tournamentMembers_none: TournamentMemberWhereInput
  tournamentRequests_every: TournamentRequestWhereInput
  tournamentRequests_some: TournamentRequestWhereInput
  tournamentRequests_none: TournamentRequestWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
